// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dealing.proto

#include "dealing.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuff_ser {
PROTOBUF_CONSTEXPR QFI::QFI(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ap_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.g_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tp_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.b0_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_neg_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QFIDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QFIDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QFIDefaultTypeInternal() {}
  union {
    QFI _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QFIDefaultTypeInternal _QFI_default_instance_;
PROTOBUF_CONSTEXPR ECP::ECP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.y_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ECPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ECPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ECPDefaultTypeInternal() {}
  union {
    ECP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ECPDefaultTypeInternal _ECP_default_instance_;
PROTOBUF_CONSTEXPR NIZK::NIZK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.z_r_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.z_alpha_vec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ff_qfi_)*/nullptr
  , /*decltype(_impl_.aa_ecp_)*/nullptr
  , /*decltype(_impl_.yy_qfi_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NIZKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NIZKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NIZKDefaultTypeInternal() {}
  union {
    NIZK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NIZKDefaultTypeInternal _NIZK_default_instance_;
PROTOBUF_CONSTEXPR Dealing::Dealing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ciphertexts_)*/{}
  , /*decltype(_impl_.public_coefficients_)*/{}
  , /*decltype(_impl_.g_r_)*/nullptr
  , /*decltype(_impl_.nizk_share_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DealingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DealingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DealingDefaultTypeInternal() {}
  union {
    Dealing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DealingDefaultTypeInternal _Dealing_default_instance_;
}  // namespace protobuff_ser
static ::_pb::Metadata file_level_metadata_dealing_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dealing_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dealing_2eproto = nullptr;

const uint32_t TableStruct_dealing_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::QFI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::QFI, _impl_.ap_vec_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::QFI, _impl_.g_vec_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::QFI, _impl_.tp_vec_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::QFI, _impl_.b0_vec_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::QFI, _impl_.is_neg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::ECP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::ECP, _impl_.x_vec_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::ECP, _impl_.y_vec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::NIZK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::NIZK, _impl_.ff_qfi_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::NIZK, _impl_.aa_ecp_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::NIZK, _impl_.yy_qfi_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::NIZK, _impl_.z_r_vec_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::NIZK, _impl_.z_alpha_vec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::Dealing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::Dealing, _impl_.ciphertexts_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::Dealing, _impl_.g_r_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::Dealing, _impl_.public_coefficients_),
  PROTOBUF_FIELD_OFFSET(::protobuff_ser::Dealing, _impl_.nizk_share_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protobuff_ser::QFI)},
  { 11, -1, -1, sizeof(::protobuff_ser::ECP)},
  { 19, -1, -1, sizeof(::protobuff_ser::NIZK)},
  { 30, -1, -1, sizeof(::protobuff_ser::Dealing)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protobuff_ser::_QFI_default_instance_._instance,
  &::protobuff_ser::_ECP_default_instance_._instance,
  &::protobuff_ser::_NIZK_default_instance_._instance,
  &::protobuff_ser::_Dealing_default_instance_._instance,
};

const char descriptor_table_protodef_dealing_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rdealing.proto\022\rprotobuff_ser\032\037google/p"
  "rotobuf/timestamp.proto\"T\n\003QFI\022\016\n\006ap_vec"
  "\030\001 \001(\014\022\r\n\005g_vec\030\002 \001(\014\022\016\n\006tp_vec\030\003 \001(\014\022\016\n"
  "\006b0_vec\030\004 \001(\014\022\016\n\006is_neg\030\005 \001(\010\"#\n\003ECP\022\r\n\005"
  "x_vec\030\001 \001(\014\022\r\n\005y_vec\030\002 \001(\014\"\230\001\n\004NIZK\022\"\n\006f"
  "f_qfi\030\001 \001(\0132\022.protobuff_ser.QFI\022\"\n\006aa_ec"
  "p\030\002 \001(\0132\022.protobuff_ser.ECP\022\"\n\006yy_qfi\030\003 "
  "\001(\0132\022.protobuff_ser.QFI\022\017\n\007z_r_vec\030\004 \001(\014"
  "\022\023\n\013z_alpha_vec\030\005 \001(\014\"\255\001\n\007Dealing\022\'\n\013cip"
  "hertexts\030\001 \003(\0132\022.protobuff_ser.QFI\022\037\n\003g_"
  "r\030\002 \001(\0132\022.protobuff_ser.QFI\022/\n\023public_co"
  "efficients\030\003 \003(\0132\022.protobuff_ser.ECP\022\'\n\n"
  "nizk_share\030\004 \001(\0132\023.protobuff_ser.NIZKb\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dealing_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_dealing_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dealing_2eproto = {
    false, false, 525, descriptor_table_protodef_dealing_2eproto,
    "dealing.proto",
    &descriptor_table_dealing_2eproto_once, descriptor_table_dealing_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_dealing_2eproto::offsets,
    file_level_metadata_dealing_2eproto, file_level_enum_descriptors_dealing_2eproto,
    file_level_service_descriptors_dealing_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dealing_2eproto_getter() {
  return &descriptor_table_dealing_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dealing_2eproto(&descriptor_table_dealing_2eproto);
namespace protobuff_ser {

// ===================================================================

class QFI::_Internal {
 public:
};

QFI::QFI(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuff_ser.QFI)
}
QFI::QFI(const QFI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QFI* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ap_vec_){}
    , decltype(_impl_.g_vec_){}
    , decltype(_impl_.tp_vec_){}
    , decltype(_impl_.b0_vec_){}
    , decltype(_impl_.is_neg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ap_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ap_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ap_vec().empty()) {
    _this->_impl_.ap_vec_.Set(from._internal_ap_vec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.g_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_g_vec().empty()) {
    _this->_impl_.g_vec_.Set(from._internal_g_vec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tp_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tp_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tp_vec().empty()) {
    _this->_impl_.tp_vec_.Set(from._internal_tp_vec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.b0_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.b0_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_b0_vec().empty()) {
    _this->_impl_.b0_vec_.Set(from._internal_b0_vec(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_neg_ = from._impl_.is_neg_;
  // @@protoc_insertion_point(copy_constructor:protobuff_ser.QFI)
}

inline void QFI::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ap_vec_){}
    , decltype(_impl_.g_vec_){}
    , decltype(_impl_.tp_vec_){}
    , decltype(_impl_.b0_vec_){}
    , decltype(_impl_.is_neg_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ap_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ap_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.g_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.g_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tp_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tp_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.b0_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.b0_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QFI::~QFI() {
  // @@protoc_insertion_point(destructor:protobuff_ser.QFI)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QFI::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ap_vec_.Destroy();
  _impl_.g_vec_.Destroy();
  _impl_.tp_vec_.Destroy();
  _impl_.b0_vec_.Destroy();
}

void QFI::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QFI::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuff_ser.QFI)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ap_vec_.ClearToEmpty();
  _impl_.g_vec_.ClearToEmpty();
  _impl_.tp_vec_.ClearToEmpty();
  _impl_.b0_vec_.ClearToEmpty();
  _impl_.is_neg_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QFI::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ap_vec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ap_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes g_vec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_g_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes tp_vec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tp_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes b0_vec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_b0_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_neg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_neg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QFI::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuff_ser.QFI)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ap_vec = 1;
  if (!this->_internal_ap_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ap_vec(), target);
  }

  // bytes g_vec = 2;
  if (!this->_internal_g_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_g_vec(), target);
  }

  // bytes tp_vec = 3;
  if (!this->_internal_tp_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_tp_vec(), target);
  }

  // bytes b0_vec = 4;
  if (!this->_internal_b0_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_b0_vec(), target);
  }

  // bool is_neg = 5;
  if (this->_internal_is_neg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_neg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuff_ser.QFI)
  return target;
}

size_t QFI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuff_ser.QFI)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ap_vec = 1;
  if (!this->_internal_ap_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ap_vec());
  }

  // bytes g_vec = 2;
  if (!this->_internal_g_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_g_vec());
  }

  // bytes tp_vec = 3;
  if (!this->_internal_tp_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tp_vec());
  }

  // bytes b0_vec = 4;
  if (!this->_internal_b0_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_b0_vec());
  }

  // bool is_neg = 5;
  if (this->_internal_is_neg() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QFI::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QFI::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QFI::GetClassData() const { return &_class_data_; }


void QFI::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QFI*>(&to_msg);
  auto& from = static_cast<const QFI&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuff_ser.QFI)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ap_vec().empty()) {
    _this->_internal_set_ap_vec(from._internal_ap_vec());
  }
  if (!from._internal_g_vec().empty()) {
    _this->_internal_set_g_vec(from._internal_g_vec());
  }
  if (!from._internal_tp_vec().empty()) {
    _this->_internal_set_tp_vec(from._internal_tp_vec());
  }
  if (!from._internal_b0_vec().empty()) {
    _this->_internal_set_b0_vec(from._internal_b0_vec());
  }
  if (from._internal_is_neg() != 0) {
    _this->_internal_set_is_neg(from._internal_is_neg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QFI::CopyFrom(const QFI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuff_ser.QFI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QFI::IsInitialized() const {
  return true;
}

void QFI::InternalSwap(QFI* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ap_vec_, lhs_arena,
      &other->_impl_.ap_vec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.g_vec_, lhs_arena,
      &other->_impl_.g_vec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tp_vec_, lhs_arena,
      &other->_impl_.tp_vec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.b0_vec_, lhs_arena,
      &other->_impl_.b0_vec_, rhs_arena
  );
  swap(_impl_.is_neg_, other->_impl_.is_neg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QFI::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dealing_2eproto_getter, &descriptor_table_dealing_2eproto_once,
      file_level_metadata_dealing_2eproto[0]);
}

// ===================================================================

class ECP::_Internal {
 public:
};

ECP::ECP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuff_ser.ECP)
}
ECP::ECP(const ECP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ECP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_vec_){}
    , decltype(_impl_.y_vec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.x_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_x_vec().empty()) {
    _this->_impl_.x_vec_.Set(from._internal_x_vec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.y_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_y_vec().empty()) {
    _this->_impl_.y_vec_.Set(from._internal_y_vec(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protobuff_ser.ECP)
}

inline void ECP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_vec_){}
    , decltype(_impl_.y_vec_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.x_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.x_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.y_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ECP::~ECP() {
  // @@protoc_insertion_point(destructor:protobuff_ser.ECP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ECP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x_vec_.Destroy();
  _impl_.y_vec_.Destroy();
}

void ECP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ECP::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuff_ser.ECP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.x_vec_.ClearToEmpty();
  _impl_.y_vec_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ECP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes x_vec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_x_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes y_vec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_y_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ECP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuff_ser.ECP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes x_vec = 1;
  if (!this->_internal_x_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_x_vec(), target);
  }

  // bytes y_vec = 2;
  if (!this->_internal_y_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_y_vec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuff_ser.ECP)
  return target;
}

size_t ECP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuff_ser.ECP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes x_vec = 1;
  if (!this->_internal_x_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_x_vec());
  }

  // bytes y_vec = 2;
  if (!this->_internal_y_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_y_vec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ECP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ECP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ECP::GetClassData() const { return &_class_data_; }


void ECP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ECP*>(&to_msg);
  auto& from = static_cast<const ECP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuff_ser.ECP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_x_vec().empty()) {
    _this->_internal_set_x_vec(from._internal_x_vec());
  }
  if (!from._internal_y_vec().empty()) {
    _this->_internal_set_y_vec(from._internal_y_vec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ECP::CopyFrom(const ECP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuff_ser.ECP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECP::IsInitialized() const {
  return true;
}

void ECP::InternalSwap(ECP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.x_vec_, lhs_arena,
      &other->_impl_.x_vec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.y_vec_, lhs_arena,
      &other->_impl_.y_vec_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ECP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dealing_2eproto_getter, &descriptor_table_dealing_2eproto_once,
      file_level_metadata_dealing_2eproto[1]);
}

// ===================================================================

class NIZK::_Internal {
 public:
  static const ::protobuff_ser::QFI& ff_qfi(const NIZK* msg);
  static const ::protobuff_ser::ECP& aa_ecp(const NIZK* msg);
  static const ::protobuff_ser::QFI& yy_qfi(const NIZK* msg);
};

const ::protobuff_ser::QFI&
NIZK::_Internal::ff_qfi(const NIZK* msg) {
  return *msg->_impl_.ff_qfi_;
}
const ::protobuff_ser::ECP&
NIZK::_Internal::aa_ecp(const NIZK* msg) {
  return *msg->_impl_.aa_ecp_;
}
const ::protobuff_ser::QFI&
NIZK::_Internal::yy_qfi(const NIZK* msg) {
  return *msg->_impl_.yy_qfi_;
}
NIZK::NIZK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuff_ser.NIZK)
}
NIZK::NIZK(const NIZK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NIZK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.z_r_vec_){}
    , decltype(_impl_.z_alpha_vec_){}
    , decltype(_impl_.ff_qfi_){nullptr}
    , decltype(_impl_.aa_ecp_){nullptr}
    , decltype(_impl_.yy_qfi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.z_r_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.z_r_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z_r_vec().empty()) {
    _this->_impl_.z_r_vec_.Set(from._internal_z_r_vec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.z_alpha_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.z_alpha_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z_alpha_vec().empty()) {
    _this->_impl_.z_alpha_vec_.Set(from._internal_z_alpha_vec(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ff_qfi()) {
    _this->_impl_.ff_qfi_ = new ::protobuff_ser::QFI(*from._impl_.ff_qfi_);
  }
  if (from._internal_has_aa_ecp()) {
    _this->_impl_.aa_ecp_ = new ::protobuff_ser::ECP(*from._impl_.aa_ecp_);
  }
  if (from._internal_has_yy_qfi()) {
    _this->_impl_.yy_qfi_ = new ::protobuff_ser::QFI(*from._impl_.yy_qfi_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuff_ser.NIZK)
}

inline void NIZK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.z_r_vec_){}
    , decltype(_impl_.z_alpha_vec_){}
    , decltype(_impl_.ff_qfi_){nullptr}
    , decltype(_impl_.aa_ecp_){nullptr}
    , decltype(_impl_.yy_qfi_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.z_r_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.z_r_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.z_alpha_vec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.z_alpha_vec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NIZK::~NIZK() {
  // @@protoc_insertion_point(destructor:protobuff_ser.NIZK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NIZK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.z_r_vec_.Destroy();
  _impl_.z_alpha_vec_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ff_qfi_;
  if (this != internal_default_instance()) delete _impl_.aa_ecp_;
  if (this != internal_default_instance()) delete _impl_.yy_qfi_;
}

void NIZK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NIZK::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuff_ser.NIZK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.z_r_vec_.ClearToEmpty();
  _impl_.z_alpha_vec_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.ff_qfi_ != nullptr) {
    delete _impl_.ff_qfi_;
  }
  _impl_.ff_qfi_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.aa_ecp_ != nullptr) {
    delete _impl_.aa_ecp_;
  }
  _impl_.aa_ecp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.yy_qfi_ != nullptr) {
    delete _impl_.yy_qfi_;
  }
  _impl_.yy_qfi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NIZK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .protobuff_ser.QFI ff_qfi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ff_qfi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuff_ser.ECP aa_ecp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_aa_ecp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protobuff_ser.QFI yy_qfi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_yy_qfi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes z_r_vec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_z_r_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes z_alpha_vec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_z_alpha_vec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NIZK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuff_ser.NIZK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .protobuff_ser.QFI ff_qfi = 1;
  if (this->_internal_has_ff_qfi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ff_qfi(this),
        _Internal::ff_qfi(this).GetCachedSize(), target, stream);
  }

  // .protobuff_ser.ECP aa_ecp = 2;
  if (this->_internal_has_aa_ecp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::aa_ecp(this),
        _Internal::aa_ecp(this).GetCachedSize(), target, stream);
  }

  // .protobuff_ser.QFI yy_qfi = 3;
  if (this->_internal_has_yy_qfi()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::yy_qfi(this),
        _Internal::yy_qfi(this).GetCachedSize(), target, stream);
  }

  // bytes z_r_vec = 4;
  if (!this->_internal_z_r_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_z_r_vec(), target);
  }

  // bytes z_alpha_vec = 5;
  if (!this->_internal_z_alpha_vec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_z_alpha_vec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuff_ser.NIZK)
  return target;
}

size_t NIZK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuff_ser.NIZK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes z_r_vec = 4;
  if (!this->_internal_z_r_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_z_r_vec());
  }

  // bytes z_alpha_vec = 5;
  if (!this->_internal_z_alpha_vec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_z_alpha_vec());
  }

  // .protobuff_ser.QFI ff_qfi = 1;
  if (this->_internal_has_ff_qfi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ff_qfi_);
  }

  // .protobuff_ser.ECP aa_ecp = 2;
  if (this->_internal_has_aa_ecp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.aa_ecp_);
  }

  // .protobuff_ser.QFI yy_qfi = 3;
  if (this->_internal_has_yy_qfi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yy_qfi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NIZK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NIZK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NIZK::GetClassData() const { return &_class_data_; }


void NIZK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NIZK*>(&to_msg);
  auto& from = static_cast<const NIZK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuff_ser.NIZK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_z_r_vec().empty()) {
    _this->_internal_set_z_r_vec(from._internal_z_r_vec());
  }
  if (!from._internal_z_alpha_vec().empty()) {
    _this->_internal_set_z_alpha_vec(from._internal_z_alpha_vec());
  }
  if (from._internal_has_ff_qfi()) {
    _this->_internal_mutable_ff_qfi()->::protobuff_ser::QFI::MergeFrom(
        from._internal_ff_qfi());
  }
  if (from._internal_has_aa_ecp()) {
    _this->_internal_mutable_aa_ecp()->::protobuff_ser::ECP::MergeFrom(
        from._internal_aa_ecp());
  }
  if (from._internal_has_yy_qfi()) {
    _this->_internal_mutable_yy_qfi()->::protobuff_ser::QFI::MergeFrom(
        from._internal_yy_qfi());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NIZK::CopyFrom(const NIZK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuff_ser.NIZK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NIZK::IsInitialized() const {
  return true;
}

void NIZK::InternalSwap(NIZK* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.z_r_vec_, lhs_arena,
      &other->_impl_.z_r_vec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.z_alpha_vec_, lhs_arena,
      &other->_impl_.z_alpha_vec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NIZK, _impl_.yy_qfi_)
      + sizeof(NIZK::_impl_.yy_qfi_)
      - PROTOBUF_FIELD_OFFSET(NIZK, _impl_.ff_qfi_)>(
          reinterpret_cast<char*>(&_impl_.ff_qfi_),
          reinterpret_cast<char*>(&other->_impl_.ff_qfi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NIZK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dealing_2eproto_getter, &descriptor_table_dealing_2eproto_once,
      file_level_metadata_dealing_2eproto[2]);
}

// ===================================================================

class Dealing::_Internal {
 public:
  static const ::protobuff_ser::QFI& g_r(const Dealing* msg);
  static const ::protobuff_ser::NIZK& nizk_share(const Dealing* msg);
};

const ::protobuff_ser::QFI&
Dealing::_Internal::g_r(const Dealing* msg) {
  return *msg->_impl_.g_r_;
}
const ::protobuff_ser::NIZK&
Dealing::_Internal::nizk_share(const Dealing* msg) {
  return *msg->_impl_.nizk_share_;
}
Dealing::Dealing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protobuff_ser.Dealing)
}
Dealing::Dealing(const Dealing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Dealing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ciphertexts_){from._impl_.ciphertexts_}
    , decltype(_impl_.public_coefficients_){from._impl_.public_coefficients_}
    , decltype(_impl_.g_r_){nullptr}
    , decltype(_impl_.nizk_share_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_g_r()) {
    _this->_impl_.g_r_ = new ::protobuff_ser::QFI(*from._impl_.g_r_);
  }
  if (from._internal_has_nizk_share()) {
    _this->_impl_.nizk_share_ = new ::protobuff_ser::NIZK(*from._impl_.nizk_share_);
  }
  // @@protoc_insertion_point(copy_constructor:protobuff_ser.Dealing)
}

inline void Dealing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ciphertexts_){arena}
    , decltype(_impl_.public_coefficients_){arena}
    , decltype(_impl_.g_r_){nullptr}
    , decltype(_impl_.nizk_share_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Dealing::~Dealing() {
  // @@protoc_insertion_point(destructor:protobuff_ser.Dealing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Dealing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ciphertexts_.~RepeatedPtrField();
  _impl_.public_coefficients_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.g_r_;
  if (this != internal_default_instance()) delete _impl_.nizk_share_;
}

void Dealing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Dealing::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuff_ser.Dealing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ciphertexts_.Clear();
  _impl_.public_coefficients_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.g_r_ != nullptr) {
    delete _impl_.g_r_;
  }
  _impl_.g_r_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nizk_share_ != nullptr) {
    delete _impl_.nizk_share_;
  }
  _impl_.nizk_share_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dealing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .protobuff_ser.QFI ciphertexts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ciphertexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .protobuff_ser.QFI g_r = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_g_r(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protobuff_ser.ECP public_coefficients = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_coefficients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .protobuff_ser.NIZK nizk_share = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nizk_share(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dealing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuff_ser.Dealing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobuff_ser.QFI ciphertexts = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ciphertexts_size()); i < n; i++) {
    const auto& repfield = this->_internal_ciphertexts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .protobuff_ser.QFI g_r = 2;
  if (this->_internal_has_g_r()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::g_r(this),
        _Internal::g_r(this).GetCachedSize(), target, stream);
  }

  // repeated .protobuff_ser.ECP public_coefficients = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_public_coefficients_size()); i < n; i++) {
    const auto& repfield = this->_internal_public_coefficients(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .protobuff_ser.NIZK nizk_share = 4;
  if (this->_internal_has_nizk_share()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::nizk_share(this),
        _Internal::nizk_share(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuff_ser.Dealing)
  return target;
}

size_t Dealing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuff_ser.Dealing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobuff_ser.QFI ciphertexts = 1;
  total_size += 1UL * this->_internal_ciphertexts_size();
  for (const auto& msg : this->_impl_.ciphertexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protobuff_ser.ECP public_coefficients = 3;
  total_size += 1UL * this->_internal_public_coefficients_size();
  for (const auto& msg : this->_impl_.public_coefficients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .protobuff_ser.QFI g_r = 2;
  if (this->_internal_has_g_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.g_r_);
  }

  // .protobuff_ser.NIZK nizk_share = 4;
  if (this->_internal_has_nizk_share()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nizk_share_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dealing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Dealing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dealing::GetClassData() const { return &_class_data_; }


void Dealing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Dealing*>(&to_msg);
  auto& from = static_cast<const Dealing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protobuff_ser.Dealing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ciphertexts_.MergeFrom(from._impl_.ciphertexts_);
  _this->_impl_.public_coefficients_.MergeFrom(from._impl_.public_coefficients_);
  if (from._internal_has_g_r()) {
    _this->_internal_mutable_g_r()->::protobuff_ser::QFI::MergeFrom(
        from._internal_g_r());
  }
  if (from._internal_has_nizk_share()) {
    _this->_internal_mutable_nizk_share()->::protobuff_ser::NIZK::MergeFrom(
        from._internal_nizk_share());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dealing::CopyFrom(const Dealing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuff_ser.Dealing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dealing::IsInitialized() const {
  return true;
}

void Dealing::InternalSwap(Dealing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ciphertexts_.InternalSwap(&other->_impl_.ciphertexts_);
  _impl_.public_coefficients_.InternalSwap(&other->_impl_.public_coefficients_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dealing, _impl_.nizk_share_)
      + sizeof(Dealing::_impl_.nizk_share_)
      - PROTOBUF_FIELD_OFFSET(Dealing, _impl_.g_r_)>(
          reinterpret_cast<char*>(&_impl_.g_r_),
          reinterpret_cast<char*>(&other->_impl_.g_r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dealing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dealing_2eproto_getter, &descriptor_table_dealing_2eproto_once,
      file_level_metadata_dealing_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuff_ser
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuff_ser::QFI*
Arena::CreateMaybeMessage< ::protobuff_ser::QFI >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuff_ser::QFI >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuff_ser::ECP*
Arena::CreateMaybeMessage< ::protobuff_ser::ECP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuff_ser::ECP >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuff_ser::NIZK*
Arena::CreateMaybeMessage< ::protobuff_ser::NIZK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuff_ser::NIZK >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuff_ser::Dealing*
Arena::CreateMaybeMessage< ::protobuff_ser::Dealing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuff_ser::Dealing >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
